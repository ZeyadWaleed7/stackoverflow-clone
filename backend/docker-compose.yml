version: '3.8'

services:
  # auth-service:
  #   build:
  #     context: ./Auth-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5001:5000"
  #   environment:
  #     - NODE_ENV=production
  #   volumes:
  #     - ./Auth-service:/usr/src/app
  #   networks:
  #     - app-network
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" 
      - "15673:15672"  
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
  redis:
    image: redis:7
    container_name: redis
    ports:
    - "6379:6379"
    volumes:
    - redis_data:/data

  mongo:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"

  # db:
  #   image: postgres:15
  #   container_name: db
  #   environment:
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_DB=authdb
  #   volumes:
  #     - db_data:/var/lib/postgresql/data

  notification-service:
    build:
      context: ./notification
      dockerfile: Dockerfile    
    ports:
      - "4005:4005"
    environment:
      - PORT=4005
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - QUEUE_NAME=notification_queue
    depends_on:
      - rabbitmq


  qa-service:
    build:
      context: ./q&a
      dockerfile: Dockerfile
    ports:
      - "5002:5000"
    environment:
      - PORT = 5002
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379  
    depends_on:
      - rabbitmq
      - redis
      - notification-service
  #   volumes:
  #     - ./q&a:/usr/src/app
  #   networks:
  #     - app-network
  #   depends_on:
  #     - redis
  # user-service:
  #   build:
  #     context: ./UserService
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5003:5000"
  #   environment:
  #     - NODE_ENV=production
  #   volumes:
  #     - ./UserService:/usr/src/app
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge


volumes:
  # mongo-data:
  rabbitmq_data:
  redis_data: